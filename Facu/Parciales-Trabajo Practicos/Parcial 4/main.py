__author__ = 'Alexander Kibysz 85698 1K2'
'''Enunciado T1E3

Una compa√±√≠a que realiza cultivos hidrop√≥nicos desea desarrollar un programa Python que le permita gestionar la informaci√≥n de cada operaci√≥n de riego realizada. Por cada riego se dispone de la siguiente informaci√≥n: volumen de agua (un valor float) nivel de PH (un valor entero que va del 1 al 10 ambos inclusive), conductividad el√©ctrica (un valor entero que va del 1 al 5 ambos inclusive) y c√≥digo de la soluci√≥n utilizada (un valor entero). Se pide definir el tipo registro Riego con los campos pedidos, y desarrollar un programa en Python controlado por un men√∫ de opciones que permita gestionar las siguientes tareas:

1- Cargar un arreglo de registros con los datos de n riegos. Valide que el nivel de PH y la conductividad el√©ctrica est√©n dentro de los valores descriptos. Puede cargar los datos manualmente, o puede generarlos aleatoriamente (pero si hace carga manual, TODA la carga debe ser manual, y si la hace autom√°tica entonces TODA debe ser autom√°tica). El arreglo debe crearse de forma que siempre quede ordenado de menor a mayor por c√≥digo de soluci√≥n. Para esto debe utilizar el algoritmo  inserci√≥n ordenada con b√∫squeda binaria. Se considerar√° directamente incorrecta la soluci√≥n basada en cargar el arreglo completo y ordenarlo al final, o aplicar el algoritmo de inserci√≥n ordenada pero con b√∫squeda secuencial.

2- Mostrar el contenido completo del vector a raz√≥n de un registro por l√≠nea.

3- Ingresar desde teclado un nivel de PH y mostrar los datos del primer registro que encuentre que tenga ese nivel de PH. Si no lo encuentra mostrar un mensaje. La b√∫squeda debe finalizarse inmediatamente si se encuentra un registro.

4- A partir del vector de registros, genere una matriz para acumular los vol√∫menes de agua por cada nivel de PH y por cada valor de conductividad el√©ctrica (matriz de acumulaci√≥n de 10 * 5 acumuladores). Pude ubicar los niveles de PH en filas y los de conductividad el√©ctrica en columnas. Al finalizar la generaci√≥n de la matriz, muestre el contenido de la misma pero solo en aquellos casos en los que se encuentren valores mayores a cero.

5- A partir del vector de registros, genere un archivo que contenga todos los datos del mismo.

6- Muestre el contenido del archivo a raz√≥n de un registro por l√≠nea, pero solo de aquellos donde el nivel de PH sea 1, 3 o 5.'''
from parc4reg import *
from parc4file import *

print('\033[0;30;45m‚óâ' * 20 + ' Parcial Numero 4 ' + '‚óâ' * 20 + '\033[0m')
print('\t\t\t\t\033[0;30;45m üî∞ Cultivos Hidrop√≥nicos üî∞ \033[0m')

#validar intervalo
def validar(x, y, msg='Ingrese su seleccion: '):
	num = x - 1
	while num < x or num > y:
		num = int(input(msg))
		if num < x or num > y:
			print(f'Por favor ingrese valores entre {x} y {y}')
	return num

#validacion numero mayor a
def validar_m(x, msg='Ingrese valor: '):
	num = x - 1
	while num <= x:
		num = int(input(msg))
		if num <= x:
			print(f'Ingrese un valor correcto mayor a {x}')
	return num

#Crea matriz acumulacion segun registro

def crear_matriz_cont(v):  # ph filas(1,10)
	# cond (1,5) columnas
	matriz = [[0] * 5 for f in range(1, 11)]
	tam = len(v)
	for i in range(len(v)):
		x = v[i].ph - 1
		y = v[i].conduct - 1
		t = round(v[i].vol, 2)
		matriz[x][y] += t  # dato vol
	return matriz

#printea matriz a razon de una fila
def mostrar_matriz(matriz):
	for f in range(len(matriz)):
		for c in range(len(matriz[0])):
			if matriz[f][c] != 0:
				p = '{0:<12}{1:<5}{2:<42}{3:<5}{4:<20}{5:<5}'.format(
					'Nivel PH: ', f+1,
					'Nivel Conductividad Electrica: ',
					c + 1,
					'Volumen de agua: ',
					matriz[f][c])
				print(p)

#verificacion vector
def verificacion(ban_v):
	if ban_v:
		print('Primero genere Registro!:')
		return False
	else:
		return True


def menu(fd):
	ban_v = True
	op = 1
	while op != 0:
		print()
		print('=' * 105)
		print(
			'1.Cargar un arreglo de registros con los datos de n riegos\n2.Mostrar '
			'el contenido completo del vector a raz√≥n de un registro por l√≠nea.\n3.Ingresar desde '
			'teclado un nivel de PH y\n  mostrar los datos del'
			' primer registro que encuentre que tenga ese nivel de PH. \n4 A '
			'partir del vector de registros,\n  genere una matriz para acumular '
			'los vol√∫menes de agua por cada nivel de PH y por cada valor de '
			'conductividad el√©ctrica.\n5.A partir del vector de registros, genere un archivo que contenga todos los datos del mismo.'
			'\n6.Muestre el contenido del archivo a raz√≥n de un registro '
			'por l√≠nea, pero solo de aquellos donde el nivel de PH sea 1, 3 o 5.'
			'\n0. Salir')

		op = validar(0, 6, 'üçÅüí¶ Ingrese la opcion: ')
		if op == 0:
			print('üåä Gracias por usar el programa!! üåä')
			break
		elif op == 1:
			n = validar_m(0,
						  'üöøIngrese cuantos Registros de Riegos desea generar: ')
			v = carga(n)
			ban_v = False
		elif op == 2:
			print()
			if verificacion(ban_v):
				print('{0:^100}'.format('Registros de Riegos: '))
				print('‚®å' * 45)
				mostrar_reg(v)
				print('‚®å' * 45)
		elif op == 3:
			print()
			if verificacion(ban_v):
				ph = validar(1, 10,
							 'Ingrese valor de PH que desea buscar en los registros: ')
				search_reg_param(v, ph)
		elif op == 4:
			print()
			if verificacion(ban_v):
				matriz = crear_matriz_cont(v)
				mostrar_matriz(matriz)
		elif op == 5:
			print()
			sl = validar(1, 2,
						 'üìÉüñä Desea Crear Archivo? ‚ö†si existe el archivo se remplazara‚ö† (1.Si 2.No): ')
			if sl == 1:
				if verificacion(ban_v):
					crear_archivo(fd, v)
			else:
				continue
		elif op == 6:
			print()
			print('‚®å' * 45)
			mostrar_arch_param(fd)
			print('‚®å' * 45)


if __name__ == '__main__':
	fd = 'Riegos.dat'
	menu(fd)
